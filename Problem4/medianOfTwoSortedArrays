/* Author: Caleb St.Germain
 * Date: 5/23/2023
 */
public class Solution{
    public double findMedianSortedArrays(int[] nums1, int[] nums2){
        //Merge the two sorted arrays
        int[] merged = new int[nums1.length + nums2.length];
        int i = 0, j = 0, k = 0;
        while(i < nums1.length && j < nums2.length){
            if (nums1[i] < nums2[j]){
                merged[k++] = nums1[i++];
            } else{
                merged[k++] = nums2[j++];
            }
        }
        while(i < nums1.length){
            merged[k++] = nums1[i++];
        }
        while(j < nums2.length){
            merged[k++] = nums2[j++];
        }

        //Calculating the median
        int totalLength = merged.length;
        if(totalLength % 2 == 0){
            int mid = totalLength / 2;
            return (merged[mid - 1] + merged[mid])/2.0;
        }else {
            int mid = totalLength / 2;
            return merged [mid];
        }
    }

    public static void main(String[] args){
        Solution solution = new Solution();

        int[] nums1 = {1,3};
        int[] nums2 = {2};
        double median = solution.findMedianSortedArrays(nums1,nums2);
        System.out.println(median); //Expected Output 2.0

        int[] nums3 = {1,2};
        int[] nums4 = {3,4};
        median = solution.findMedianSortedArrays(nums3,nums4);
        System.out.println(median); //Expected Output 2.5 
    }
}